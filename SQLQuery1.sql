-- Find the total Sales across all orders

Use salesDb;

SELECT * FROM SALES.Orders;

select sum(sales) as total_sales from sales.Orders;

-- Find total sales for each product
select productID, sum(sales) Total_sales from sales.orders
group by ProductID;

/*
Find the total sales for each product
Additionally provide details such orderID, order Date
*//*
SELECT
	ORDERID, ORDERDATE, PRODUCTID, SUM(SALES) AS TOTAL_SALES FROM SALES.Orders
	GROUP BY ORDERID, ORDERDATE, PRODUCTID;
	*/
	SELECT 
		ORDERID, 
		ORDERDATE, 
		PRODUCTID,
		SUM(SALES) OVER(PARTITION BY PRODUCTID) AS TOTALSALESPRODUCTS
	FROM SALES.Orders;

/*
Window Functions/Analytical Functions
Syntax:
********
Window Function() over(partition order by frame)
Eg:
AVG(salary) OVER(PARTITION BY CATAGORY ORDER BY ORDERDATE ROWS UNBUNDED PRECEDING)
	EMPLY : RANK() OVER(ORDER BY ORDERDATE)
	COLUMN : AVG(SAL) OVER(ORDER BY ORDERDATE)
	NUMBER : NTEIL(2) OVER(ORDER BY ORDERDATE)
	MULTIPLE ARGUMENTS : LEAD(SALES,2,10) OVER(ORDER BY ORDERDATE)
	CONDITIONAL LOGIN : SUM(CASE WHEN SALES>100 THEN 1 ELES 0) OVER(ORDER BY ORDERDATE)

	WINDOW FUNCTIONS:
	AGGREGRATE FUNCTIONS:
		SUM()	NUMERIC DATATYPE
		MIN()	NUMERIC DATATYPE
		MAX()	NUMERIC DATATYPE
		AVG()	NUMERIC DATATYPE
		COUNT() ALL
	RANK FUNCTIONS:
		RANK()	EMPTY
		ROW_NUMBER()	EMPTY
		DENSE_RANK()	EMPTY
		CUME_DIST()		EMPTY
		PERCENT_RANK()	EMPTY
		NTILE(N)	NUMERIC DATATYPE
	VALUE(ANALYTICAL FUNCTIONS)
		LEAD()	ALL
		LAG()	ALL
		FIRST_VALUE()	ALL


	ORDER BY:
	PARTATION CLAUES IS OPTIONAL FOR ALL WINDOW FUNCTIONS
	ORDER BY IS OPTIONAL FOR AGGREGRATE FUNCTIONS, REQUIRED FOR RANK FUNCTIONS AND VALUE(ANALYTICAL FUNCTIONS)



	FRAME CLAUSE:
	AVG(SALES) OVER(PARTATION BY CATAGORY ORDER BY ORDERDATE
					ROWS BETWEEN CURRENT ROW AND UNBOUNDED PRECEDING)
			ROWS:
				FRAME TYPES:
					ROWS
					RANGE
			CURRENT ROW:
				FRAME BOUNDARY(LOWER VALUE)
					CURRENT ROW
					N PRECEDING
					UNBOUNDED PRECEDING
			UNBOUNDED PRECEDING
				FRAME BOUNDARY(HIGHER VALUE)
					CURRENT ROW
					N FOLLOWING
					UNBOUNDED FOLLOWING
	RULES:
	FRAME CLAUSE CAN BE ONLY USED WITH ORDER BY CLAUES
	LOWER VALUE MUST BE BEFORE HIGHER VALUE
	

*/

-- FIND THE TOTAL SALES FOR EACH PRODUCT
-- ADDTIONALLY PROVIDE DETAILS SUCH ORDERID, ORDERDATE
SELECT
	ORDERID,
	ORDERDATE,
	SUM(SALES) OVER() AS TOTALSALES
	FROM SALESDB.SALES.Orders;

SELECT
	ORDERID,
	ORDERDATE,
	PRODUCTID,
	SALES,
	SUM(SALES) OVER() AS SUMOFSALES,
	SUM(SALES) OVER(PARTITION BY PRODUCTID) AS TOTALSALES
	FROM SaleSDB.Sales.Orders;

-- FIND THE TOTAL SALES ACROSS ALL ORDERS
-- FIND THE TOTAL SALES FOR EACH PRODUCT
-- FIND THE TOTAL SALES FOR EACH COMBINATION OF PRODUCT AND ORDER STATUS
-- ADDTIONALLY PROVIDE DETAILS SUCH ORDERID, ORDERDATE
SELECT
	ORDERID,
	ORDERDATE,
	PRODUCTID,
	ORDERSTATUS,
	SUM(SALES) OVER() TOTAL,
	SUM(SALES) OVER(PARTITION BY PRODUCTID) AS TOTALSALES,
	SUM(SALES) OVER(PARTITION BY PRODUCTID, ORDERSTATUS) AS SALESPRODUCTS
	FROM SalesDB.Sales.Orders;
	
-- RANK EACH ORDER BASED ON THEIR SALES FROM HEIGHEST TO LOWEST
-- ADDITIONALLY PROVIDE DETAILS SUCH ORDERID, ORDERDATE
SELECT 
	ORDERID,
	ORDERDATE,
	SALES,
	RANK() OVER(ORDER BY SALES DESC) AS SALESORDER
	FROM SalesDB.Sales.Orders;

SELECT
	ORDERID,
		ORDERDATE,
		ORDERSTATUS,
		SALES,
		SUM(SALES) OVER(PARTITION BY ORDERSTATUS ORDER BY ORDERDATE
			ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS SALESSUM
			FROM SalesDB.Sales.Orders;

-- FOR QUICK RESULTS WE MAY USE ONLY PRECEDING, FOLLOWING WILL NOT NOT RETRIVE THE DATA.
SELECT
	ORDERID,
	ORDERDATE,
	ORDERSTATUS,
	SALES,
	SUM(SALES) OVER(PARTITION BY ORDERSTATUS ORDER BY ORDERDATE
					ROWS UNBOUNDED PRECEDING) AS SALESSUM
					FROM SalesDB.Sales.Orders;

-- DEFAULT FRAME
SELECT
	ORDERID,
	ORDERDATE,
	ORDERSTATUS,
	SALES,
	SUM(SALES) OVER(PARTITION BY ORDERSTATUS ORDER BY ORDERDATE--) AS SALESSUM
	ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS SALESSUM -- IT IS THE DEAFULT INNER QUERY
	FROM SalesDB.Sales.Orders;

	-- WE CAN USE WINDOW FUNCTIONS IN SELECT CLAUSE OR ORDER BY CLAUES
	SELECT
		ORDERID,
		ORDERDATE,
		ORDERSTATUS,
		SALES,
		SUM(SALES) OVER(PARTITION BY ORDERSTATUS) AS TOTALSALES
		FROM SalesDB.Sales.Orders
		ORDER BY
		SUM(SALES) OVER(PARTITION BY ORDERSTATUS) DESC;

	-- NESTING WINDOW FUNCTIONS ARE NOT ALLOWED
	SELECT
		ORDERID,
		ORDERDATE,
		ORDERSTATUS,
		SALES,
		SUM(SUM(SALES) OVER(PARTITION BY ORDERSTATUS)) OVER(PARTITION BY ORDERSTATUS) AS TOTALSALES -- NOT ALLOWED
		FROM SalesDB.Sales.Orders --Windowed functions cannot be used in the context of another windowed function or aggregate.
		ORDER BY
		SUM(SALES) OVER(PARTITION BY ORDERSTATUS) DESC;

	-- SQL EXECUTE WINDOW FUNCTION AFTER WHERE CLAUE
		-- FIND THE TOTAL SALES FOR EACH ORDER STATUS
		-- ONLY FOR TWO PRODUCTS 101 AND 102
	SELECT
		ORDERID,
		PRODUCTID,
		ORDERDATE,
		ORDERSTATUS,
		SALES,
		SUM(SALES) OVER(PARTITION BY ORDERSTATUS) AS TOTALSALES
		FROM SalesDB.Sales.Orders
		WHERE PRODUCTID IN (101, 102)
		ORDER BY ProductID;

	-- WINDOW FUNCTION CAN BE USED TOGETHER WITH GROUP BY CLAUSE
	-- IN THE SAME QUERY, ONLY IF THE SAME COLUMNS ARE USED

		-- RANK CUSTOMERS BASED ON THEIR TOTAL SALES
	SELECT
		CUSTOMERID,
		SUM(SALES) AS SALESSUM,
		RANK() OVER(ORDER BY SUM(SALES) DESC) AS RANKCUSTOMERS
		FROM SalesDB.Sales.Orders
		GROUP BY CustomerID;




